import { supabase } from "./supabase"
import type { UserSubscription } from "./supabase"

// Verificar se o Supabase est√° dispon√≠vel
const checkSupabaseAvailable = () => {
  if (!supabase) {
    throw new Error("‚ùå Supabase n√£o est√° configurado. Verifique as vari√°veis de ambiente.")
  }
  return true
}

export const authService = {
  // Registrar usu√°rio (sem criar assinatura - ser√° criada pelo webhook)
  async signUp(email: string, password: string) {
    try {
      checkSupabaseAvailable()

      console.log("üîÑ Criando usu√°rio:", email)

      // Criar usu√°rio no Supabase Auth
      const { data: authData, error: authError } = await supabase!.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: undefined, // Desabilita verifica√ß√£o de email
        },
      })

      if (authError) {
        console.error("‚ùå Erro na cria√ß√£o:", authError)
        throw authError
      }

      console.log("‚úÖ Usu√°rio criado:", authData.user?.id)

      if (authData.user) {
        // Registrar analytics
        await this.logUserAction(authData.user.id, "user_registered", "/auth/signup")
      }

      return authData
    } catch (error) {
      console.error("‚ùå Erro no registro:", error)
      throw error
    }
  },

  // Login do usu√°rio
  async signIn(email: string, password: string) {
    try {
      checkSupabaseAvailable()

      console.log("üîÑ Fazendo login:", email)

      const { data, error } = await supabase!.auth.signInWithPassword({
        email,
        password,
      })

      if (error) {
        console.error("‚ùå Erro no login:", error)
        throw error
      }

      console.log("‚úÖ Login realizado:", data.user?.id)

      if (data.user) {
        // Verificar se tem assinatura ativa
        const subscription = await this.checkUserSubscription(data.user.id)
        if (!subscription) {
          // Verificar por email se n√£o encontrou por user_id
          const subscriptionByEmail = await this.checkSubscriptionByEmail(data.user.email!)
          if (subscriptionByEmail) {
            // Associar assinatura ao usu√°rio
            await this.linkSubscriptionToUser(data.user.id, data.user.email!)
          }
        }

        // Registrar analytics
        await this.logUserAction(data.user.id, "user_login", "/auth/signin")
      }

      return data
    } catch (error) {
      console.error("‚ùå Erro no login:", error)
      throw error
    }
  },

  // Logout
  async signOut() {
    try {
      checkSupabaseAvailable()
      const { error } = await supabase!.auth.signOut()
      if (error) throw error
      console.log("‚úÖ Logout realizado")
    } catch (error) {
      console.error("‚ùå Erro no logout:", error)
      throw error
    }
  },

  // Verificar se usu√°rio tem assinatura ativa por user_id
  async checkUserSubscription(userId: string): Promise<UserSubscription | null> {
    try {
      checkSupabaseAvailable()

      console.log("üîÑ Verificando assinatura por user_id:", userId)

      const { data, error } = await supabase!
        .from("user_subscriptions")
        .select("*")
        .eq("user_id", userId)
        .eq("subscription_status", "active")
        .single()

      if (error && error.code !== "PGRST116") {
        console.error("‚ùå Erro na verifica√ß√£o:", error)
        return null
      }

      console.log("‚úÖ Assinatura encontrada:", data?.subscription_plan)
      return data
    } catch (error) {
      console.error("‚ùå Erro ao verificar assinatura:", error)
      return null
    }
  },

  // Verificar assinatura por email
  async checkSubscriptionByEmail(email: string): Promise<UserSubscription | null> {
    try {
      checkSupabaseAvailable()

      console.log("üîÑ Verificando assinatura por email:", email)

      const { data, error } = await supabase!
        .from("user_subscriptions")
        .select("*")
        .eq("email", email)
        .eq("subscription_status", "active")
        .single()

      if (error && error.code !== "PGRST116") {
        console.error("‚ùå Erro na verifica√ß√£o por email:", error)
        return null
      }

      console.log("‚úÖ Assinatura encontrada por email:", data?.subscription_plan)
      return data
    } catch (error) {
      console.error("‚ùå Erro ao verificar assinatura por email:", error)
      return null
    }
  },

  // Associar assinatura ao usu√°rio
  async linkSubscriptionToUser(userId: string, email: string) {
    try {
      checkSupabaseAvailable()

      console.log("üîó Associando assinatura ao usu√°rio:", userId, email)

      const { error } = await supabase!
        .from("user_subscriptions")
        .update({ user_id: userId })
        .eq("email", email)
        .is("user_id", null)

      if (error) {
        console.error("‚ùå Erro ao associar assinatura:", error)
        return false
      }

      console.log("‚úÖ Assinatura associada com sucesso")
      return true
    } catch (error) {
      console.error("‚ùå Erro ao associar assinatura:", error)
      return false
    }
  },

  // Registrar a√ß√£o do usu√°rio para analytics
  async logUserAction(userId: string, action: string, page?: string, metadata?: any) {
    try {
      if (!supabase) return // Falha silenciosa se Supabase n√£o estiver dispon√≠vel

      const { error } = await supabase.from("user_analytics").insert({
        user_id: userId,
        action,
        page,
        metadata,
      })

      if (error) console.error("‚ùå Erro ao registrar analytics:", error)
    } catch (error) {
      console.error("‚ùå Erro ao registrar analytics:", error)
    }
  },
}
